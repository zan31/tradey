{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/*!\n * jQuery Color Animations v2.2.0\n * https://github.com/jquery/jquery-color\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * Date: Sun May 10 09:02:36 2020 +0200\n */\n(function (root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([\"jquery\"], factory);\n  } else if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === \"object\") {\n    module.exports = factory(require(\"jquery\"));\n  } else {\n    factory(root.jQuery);\n  }\n})(this, function (jQuery, undefined) {\n  var stepHooks = \"backgroundColor borderBottomColor borderLeftColor borderRightColor \" + \"borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor\",\n      class2type = {},\n      toString = class2type.toString,\n      // plusequals test for += 100 -= 100\n  rplusequals = /^([\\-+])=\\s*(\\d+\\.?\\d*)/,\n      // a set of RE's that can match strings and generate color tuples.\n  stringParsers = [{\n    re: /rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(?:,\\s*(\\d?(?:\\.\\d+)?)\\s*)?\\)/,\n    parse: function parse(execResult) {\n      return [execResult[1], execResult[2], execResult[3], execResult[4]];\n    }\n  }, {\n    re: /rgba?\\(\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*(?:,\\s*(\\d?(?:\\.\\d+)?)\\s*)?\\)/,\n    parse: function parse(execResult) {\n      return [execResult[1] * 2.55, execResult[2] * 2.55, execResult[3] * 2.55, execResult[4]];\n    }\n  }, {\n    // this regex ignores A-F because it's compared against an already lowercased string\n    re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})?/,\n    parse: function parse(execResult) {\n      return [parseInt(execResult[1], 16), parseInt(execResult[2], 16), parseInt(execResult[3], 16), execResult[4] ? (parseInt(execResult[4], 16) / 255).toFixed(2) : 1];\n    }\n  }, {\n    // this regex ignores A-F because it's compared against an already lowercased string\n    re: /#([a-f0-9])([a-f0-9])([a-f0-9])([a-f0-9])?/,\n    parse: function parse(execResult) {\n      return [parseInt(execResult[1] + execResult[1], 16), parseInt(execResult[2] + execResult[2], 16), parseInt(execResult[3] + execResult[3], 16), execResult[4] ? (parseInt(execResult[4] + execResult[4], 16) / 255).toFixed(2) : 1];\n    }\n  }, {\n    re: /hsla?\\(\\s*(\\d+(?:\\.\\d+)?)\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*(?:,\\s*(\\d?(?:\\.\\d+)?)\\s*)?\\)/,\n    space: \"hsla\",\n    parse: function parse(execResult) {\n      return [execResult[1], execResult[2] / 100, execResult[3] / 100, execResult[4]];\n    }\n  }],\n      // jQuery.Color( )\n  color = jQuery.Color = function (color, green, blue, alpha) {\n    return new jQuery.Color.fn.parse(color, green, blue, alpha);\n  },\n      spaces = {\n    rgba: {\n      props: {\n        red: {\n          idx: 0,\n          type: \"byte\"\n        },\n        green: {\n          idx: 1,\n          type: \"byte\"\n        },\n        blue: {\n          idx: 2,\n          type: \"byte\"\n        }\n      }\n    },\n    hsla: {\n      props: {\n        hue: {\n          idx: 0,\n          type: \"degrees\"\n        },\n        saturation: {\n          idx: 1,\n          type: \"percent\"\n        },\n        lightness: {\n          idx: 2,\n          type: \"percent\"\n        }\n      }\n    }\n  },\n      propTypes = {\n    \"byte\": {\n      floor: true,\n      max: 255\n    },\n    \"percent\": {\n      max: 1\n    },\n    \"degrees\": {\n      mod: 360,\n      floor: true\n    }\n  },\n      support = color.support = {},\n      // element for support tests\n  supportElem = jQuery(\"<p>\")[0],\n      // colors = jQuery.Color.names\n  colors,\n      // local aliases of functions called often\n  each = jQuery.each; // determine rgba support immediately\n\n\n  supportElem.style.cssText = \"background-color:rgba(1,1,1,.5)\";\n  support.rgba = supportElem.style.backgroundColor.indexOf(\"rgba\") > -1; // define cache name and alpha properties\n  // for rgba and hsla spaces\n\n  each(spaces, function (spaceName, space) {\n    space.cache = \"_\" + spaceName;\n    space.props.alpha = {\n      idx: 3,\n      type: \"percent\",\n      def: 1\n    };\n  }); // Populate the class2type map\n\n  jQuery.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"), function (_i, name) {\n    class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\n  });\n\n  function getType(obj) {\n    if (obj == null) {\n      return obj + \"\";\n    }\n\n    return _typeof(obj) === \"object\" ? class2type[toString.call(obj)] || \"object\" : _typeof(obj);\n  }\n\n  function clamp(value, prop, allowEmpty) {\n    var type = propTypes[prop.type] || {};\n\n    if (value == null) {\n      return allowEmpty || !prop.def ? null : prop.def;\n    } // ~~ is an short way of doing floor for positive numbers\n\n\n    value = type.floor ? ~~value : parseFloat(value); // IE will pass in empty strings as value for alpha,\n    // which will hit this case\n\n    if (isNaN(value)) {\n      return prop.def;\n    }\n\n    if (type.mod) {\n      // we add mod before modding to make sure that negatives values\n      // get converted properly: -10 -> 350\n      return (value + type.mod) % type.mod;\n    } // for now all property types without mod have min and max\n\n\n    return Math.min(type.max, Math.max(0, value));\n  }\n\n  function stringParse(string) {\n    var inst = color(),\n        rgba = inst._rgba = [];\n    string = string.toLowerCase();\n    each(stringParsers, function (_i, parser) {\n      var parsed,\n          match = parser.re.exec(string),\n          values = match && parser.parse(match),\n          spaceName = parser.space || \"rgba\";\n\n      if (values) {\n        parsed = inst[spaceName](values); // if this was an rgba parse the assignment might happen twice\n        // oh well....\n\n        inst[spaces[spaceName].cache] = parsed[spaces[spaceName].cache];\n        rgba = inst._rgba = parsed._rgba; // exit each( stringParsers ) here because we matched\n\n        return false;\n      }\n    }); // Found a stringParser that handled it\n\n    if (rgba.length) {\n      // if this came from a parsed string, force \"transparent\" when alpha is 0\n      // chrome, (and maybe others) return \"transparent\" as rgba(0,0,0,0)\n      if (rgba.join() === \"0,0,0,0\") {\n        jQuery.extend(rgba, colors.transparent);\n      }\n\n      return inst;\n    } // named colors\n\n\n    return colors[string];\n  }\n\n  color.fn = jQuery.extend(color.prototype, {\n    parse: function parse(red, green, blue, alpha) {\n      if (red === undefined) {\n        this._rgba = [null, null, null, null];\n        return this;\n      }\n\n      if (red.jquery || red.nodeType) {\n        red = jQuery(red).css(green);\n        green = undefined;\n      }\n\n      var inst = this,\n          type = getType(red),\n          rgba = this._rgba = []; // more than 1 argument specified - assume ( red, green, blue, alpha )\n\n      if (green !== undefined) {\n        red = [red, green, blue, alpha];\n        type = \"array\";\n      }\n\n      if (type === \"string\") {\n        return this.parse(stringParse(red) || colors._default);\n      }\n\n      if (type === \"array\") {\n        each(spaces.rgba.props, function (_key, prop) {\n          rgba[prop.idx] = clamp(red[prop.idx], prop);\n        });\n        return this;\n      }\n\n      if (type === \"object\") {\n        if (red instanceof color) {\n          each(spaces, function (_spaceName, space) {\n            if (red[space.cache]) {\n              inst[space.cache] = red[space.cache].slice();\n            }\n          });\n        } else {\n          each(spaces, function (_spaceName, space) {\n            var cache = space.cache;\n            each(space.props, function (key, prop) {\n              // if the cache doesn't exist, and we know how to convert\n              if (!inst[cache] && space.to) {\n                // if the value was null, we don't need to copy it\n                // if the key was alpha, we don't need to copy it either\n                if (key === \"alpha\" || red[key] == null) {\n                  return;\n                }\n\n                inst[cache] = space.to(inst._rgba);\n              } // this is the only case where we allow nulls for ALL properties.\n              // call clamp with alwaysAllowEmpty\n\n\n              inst[cache][prop.idx] = clamp(red[key], prop, true);\n            }); // everything defined but alpha?\n\n            if (inst[cache] && jQuery.inArray(null, inst[cache].slice(0, 3)) < 0) {\n              // use the default of 1\n              if (inst[cache][3] == null) {\n                inst[cache][3] = 1;\n              }\n\n              if (space.from) {\n                inst._rgba = space.from(inst[cache]);\n              }\n            }\n          });\n        }\n\n        return this;\n      }\n    },\n    is: function is(compare) {\n      var is = color(compare),\n          same = true,\n          inst = this;\n      each(spaces, function (_, space) {\n        var localCache,\n            isCache = is[space.cache];\n\n        if (isCache) {\n          localCache = inst[space.cache] || space.to && space.to(inst._rgba) || [];\n          each(space.props, function (_, prop) {\n            if (isCache[prop.idx] != null) {\n              same = isCache[prop.idx] === localCache[prop.idx];\n              return same;\n            }\n          });\n        }\n\n        return same;\n      });\n      return same;\n    },\n    _space: function _space() {\n      var used = [],\n          inst = this;\n      each(spaces, function (spaceName, space) {\n        if (inst[space.cache]) {\n          used.push(spaceName);\n        }\n      });\n      return used.pop();\n    },\n    transition: function transition(other, distance) {\n      var end = color(other),\n          spaceName = end._space(),\n          space = spaces[spaceName],\n          startColor = this.alpha() === 0 ? color(\"transparent\") : this,\n          start = startColor[space.cache] || space.to(startColor._rgba),\n          result = start.slice();\n\n      end = end[space.cache];\n      each(space.props, function (_key, prop) {\n        var index = prop.idx,\n            startValue = start[index],\n            endValue = end[index],\n            type = propTypes[prop.type] || {}; // if null, don't override start value\n\n        if (endValue === null) {\n          return;\n        } // if null - use end\n\n\n        if (startValue === null) {\n          result[index] = endValue;\n        } else {\n          if (type.mod) {\n            if (endValue - startValue > type.mod / 2) {\n              startValue += type.mod;\n            } else if (startValue - endValue > type.mod / 2) {\n              startValue -= type.mod;\n            }\n          }\n\n          result[index] = clamp((endValue - startValue) * distance + startValue, prop);\n        }\n      });\n      return this[spaceName](result);\n    },\n    blend: function blend(opaque) {\n      // if we are already opaque - return ourself\n      if (this._rgba[3] === 1) {\n        return this;\n      }\n\n      var rgb = this._rgba.slice(),\n          a = rgb.pop(),\n          blend = color(opaque)._rgba;\n\n      return color(jQuery.map(rgb, function (v, i) {\n        return (1 - a) * blend[i] + a * v;\n      }));\n    },\n    toRgbaString: function toRgbaString() {\n      var prefix = \"rgba(\",\n          rgba = jQuery.map(this._rgba, function (v, i) {\n        if (v != null) {\n          return v;\n        }\n\n        return i > 2 ? 1 : 0;\n      });\n\n      if (rgba[3] === 1) {\n        rgba.pop();\n        prefix = \"rgb(\";\n      }\n\n      return prefix + rgba.join() + \")\";\n    },\n    toHslaString: function toHslaString() {\n      var prefix = \"hsla(\",\n          hsla = jQuery.map(this.hsla(), function (v, i) {\n        if (v == null) {\n          v = i > 2 ? 1 : 0;\n        } // catch 1 and 2\n\n\n        if (i && i < 3) {\n          v = Math.round(v * 100) + \"%\";\n        }\n\n        return v;\n      });\n\n      if (hsla[3] === 1) {\n        hsla.pop();\n        prefix = \"hsl(\";\n      }\n\n      return prefix + hsla.join() + \")\";\n    },\n    toHexString: function toHexString(includeAlpha) {\n      var rgba = this._rgba.slice(),\n          alpha = rgba.pop();\n\n      if (includeAlpha) {\n        rgba.push(~~(alpha * 255));\n      }\n\n      return \"#\" + jQuery.map(rgba, function (v) {\n        // default to 0 when nulls exist\n        v = (v || 0).toString(16);\n        return v.length === 1 ? \"0\" + v : v;\n      }).join(\"\");\n    },\n    toString: function toString() {\n      return this._rgba[3] === 0 ? \"transparent\" : this.toRgbaString();\n    }\n  });\n  color.fn.parse.prototype = color.fn; // hsla conversions adapted from:\n  // https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021\n\n  function hue2rgb(p, q, h) {\n    h = (h + 1) % 1;\n\n    if (h * 6 < 1) {\n      return p + (q - p) * h * 6;\n    }\n\n    if (h * 2 < 1) {\n      return q;\n    }\n\n    if (h * 3 < 2) {\n      return p + (q - p) * (2 / 3 - h) * 6;\n    }\n\n    return p;\n  }\n\n  spaces.hsla.to = function (rgba) {\n    if (rgba[0] == null || rgba[1] == null || rgba[2] == null) {\n      return [null, null, null, rgba[3]];\n    }\n\n    var r = rgba[0] / 255,\n        g = rgba[1] / 255,\n        b = rgba[2] / 255,\n        a = rgba[3],\n        max = Math.max(r, g, b),\n        min = Math.min(r, g, b),\n        diff = max - min,\n        add = max + min,\n        l = add * 0.5,\n        h,\n        s;\n\n    if (min === max) {\n      h = 0;\n    } else if (r === max) {\n      h = 60 * (g - b) / diff + 360;\n    } else if (g === max) {\n      h = 60 * (b - r) / diff + 120;\n    } else {\n      h = 60 * (r - g) / diff + 240;\n    } // chroma (diff) == 0 means greyscale which, by definition, saturation = 0%\n    // otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)\n\n\n    if (diff === 0) {\n      s = 0;\n    } else if (l <= 0.5) {\n      s = diff / add;\n    } else {\n      s = diff / (2 - add);\n    }\n\n    return [Math.round(h) % 360, s, l, a == null ? 1 : a];\n  };\n\n  spaces.hsla.from = function (hsla) {\n    if (hsla[0] == null || hsla[1] == null || hsla[2] == null) {\n      return [null, null, null, hsla[3]];\n    }\n\n    var h = hsla[0] / 360,\n        s = hsla[1],\n        l = hsla[2],\n        a = hsla[3],\n        q = l <= 0.5 ? l * (1 + s) : l + s - l * s,\n        p = 2 * l - q;\n    return [Math.round(hue2rgb(p, q, h + 1 / 3) * 255), Math.round(hue2rgb(p, q, h) * 255), Math.round(hue2rgb(p, q, h - 1 / 3) * 255), a];\n  };\n\n  each(spaces, function (spaceName, space) {\n    var props = space.props,\n        cache = space.cache,\n        to = space.to,\n        from = space.from; // makes rgba() and hsla()\n\n    color.fn[spaceName] = function (value) {\n      // generate a cache for this space if it doesn't exist\n      if (to && !this[cache]) {\n        this[cache] = to(this._rgba);\n      }\n\n      if (value === undefined) {\n        return this[cache].slice();\n      }\n\n      var ret,\n          type = getType(value),\n          arr = type === \"array\" || type === \"object\" ? value : arguments,\n          local = this[cache].slice();\n      each(props, function (key, prop) {\n        var val = arr[type === \"object\" ? key : prop.idx];\n\n        if (val == null) {\n          val = local[prop.idx];\n        }\n\n        local[prop.idx] = clamp(val, prop);\n      });\n\n      if (from) {\n        ret = color(from(local));\n        ret[cache] = local;\n        return ret;\n      } else {\n        return color(local);\n      }\n    }; // makes red() green() blue() alpha() hue() saturation() lightness()\n\n\n    each(props, function (key, prop) {\n      // alpha is included in more than one space\n      if (color.fn[key]) {\n        return;\n      }\n\n      color.fn[key] = function (value) {\n        var local,\n            cur,\n            match,\n            fn,\n            vtype = getType(value);\n\n        if (key === \"alpha\") {\n          fn = this._hsla ? \"hsla\" : \"rgba\";\n        } else {\n          fn = spaceName;\n        }\n\n        local = this[fn]();\n        cur = local[prop.idx];\n\n        if (vtype === \"undefined\") {\n          return cur;\n        }\n\n        if (vtype === \"function\") {\n          value = value.call(this, cur);\n          vtype = getType(value);\n        }\n\n        if (value == null && prop.empty) {\n          return this;\n        }\n\n        if (vtype === \"string\") {\n          match = rplusequals.exec(value);\n\n          if (match) {\n            value = cur + parseFloat(match[2]) * (match[1] === \"+\" ? 1 : -1);\n          }\n        }\n\n        local[prop.idx] = value;\n        return this[fn](local);\n      };\n    });\n  }); // add cssHook and .fx.step function for each named hook.\n  // accept a space separated string of properties\n\n  color.hook = function (hook) {\n    var hooks = hook.split(\" \");\n    each(hooks, function (_i, hook) {\n      jQuery.cssHooks[hook] = {\n        set: function set(elem, value) {\n          var parsed,\n              curElem,\n              backgroundColor = \"\";\n\n          if (value !== \"transparent\" && (getType(value) !== \"string\" || (parsed = stringParse(value)))) {\n            value = color(parsed || value);\n\n            if (!support.rgba && value._rgba[3] !== 1) {\n              curElem = hook === \"backgroundColor\" ? elem.parentNode : elem;\n\n              while ((backgroundColor === \"\" || backgroundColor === \"transparent\") && curElem && curElem.style) {\n                try {\n                  backgroundColor = jQuery.css(curElem, \"backgroundColor\");\n                  curElem = curElem.parentNode;\n                } catch (e) {}\n              }\n\n              value = value.blend(backgroundColor && backgroundColor !== \"transparent\" ? backgroundColor : \"_default\");\n            }\n\n            value = value.toRgbaString();\n          }\n\n          try {\n            elem.style[hook] = value;\n          } catch (e) {// wrapped to prevent IE from throwing errors on \"invalid\" values like 'auto' or 'inherit'\n          }\n        }\n      };\n\n      jQuery.fx.step[hook] = function (fx) {\n        if (!fx.colorInit) {\n          fx.start = color(fx.elem, hook);\n          fx.end = color(fx.end);\n          fx.colorInit = true;\n        }\n\n        jQuery.cssHooks[hook].set(fx.elem, fx.start.transition(fx.end, fx.pos));\n      };\n    });\n  };\n\n  color.hook(stepHooks);\n  jQuery.cssHooks.borderColor = {\n    expand: function expand(value) {\n      var expanded = {};\n      each([\"Top\", \"Right\", \"Bottom\", \"Left\"], function (_i, part) {\n        expanded[\"border\" + part + \"Color\"] = value;\n      });\n      return expanded;\n    }\n  }; // Basic color names only.\n  // Usage of any of the other color names requires adding yourself or including\n  // jquery.color.svg-names.js.\n\n  colors = jQuery.Color.names = {\n    // 4.1. Basic color keywords\n    aqua: \"#00ffff\",\n    black: \"#000000\",\n    blue: \"#0000ff\",\n    fuchsia: \"#ff00ff\",\n    gray: \"#808080\",\n    green: \"#008000\",\n    lime: \"#00ff00\",\n    maroon: \"#800000\",\n    navy: \"#000080\",\n    olive: \"#808000\",\n    purple: \"#800080\",\n    red: \"#ff0000\",\n    silver: \"#c0c0c0\",\n    teal: \"#008080\",\n    white: \"#ffffff\",\n    yellow: \"#ffff00\",\n    // 4.2.3. \"transparent\" color keyword\n    transparent: [null, null, null, 0],\n    _default: \"#ffffff\"\n  };\n});","map":null,"metadata":{},"sourceType":"module"}