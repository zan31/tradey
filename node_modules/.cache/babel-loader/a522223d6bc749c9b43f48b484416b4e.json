{"ast":null,"code":"import Rails from \"@rails/ujs\";\nimport jQuery from \"jquery\";\nimport \"jquery-ui/ui/widget\";\nimport * as bootstrap from \"bootstrap/dist/js/bootstrap.esm\";\n\n(function ($) {\n  $.widget(\"ra.remoteForm\", {\n    _create: function _create() {\n      var widget = this;\n      var dom_widget = widget.element;\n      var edit_url = dom_widget.find(\"select\").first().data(\"options\") && dom_widget.find(\"select\").first().data(\"options\")[\"edit-url\"];\n\n      if (typeof edit_url != \"undefined\" && edit_url.length) {\n        dom_widget.on(\"dblclick\", \".ra-multiselect option:not(:disabled)\", function (e) {\n          widget._bindModalOpening(e, edit_url.replace(\"__ID__\", this.value));\n        });\n      }\n\n      dom_widget.find(\".create\").unbind().bind(\"click\", function (e) {\n        widget._bindModalOpening(e, $(this).data(\"link\"));\n      });\n      dom_widget.find(\".update\").unbind().bind(\"click\", function (e) {\n        var value = dom_widget.find(\"select\").val();\n\n        if (value) {\n          widget._bindModalOpening(e, $(this).data(\"link\").replace(\"__ID__\", value));\n        } else {\n          e.preventDefault();\n        }\n      });\n    },\n    _bindModalOpening: function _bindModalOpening(e, url) {\n      e.preventDefault();\n      var widget = this;\n      if ($(\"#modal\").length) return false;\n\n      var dialog = this._getModal();\n\n      setTimeout(function () {\n        // fix race condition with modal insertion in the dom (Chrome => Team/add a new fan => #modal not found when it should have). Somehow .on('show') is too early, tried it too.\n        $.ajax({\n          url: url,\n          beforeSend: function beforeSend(xhr) {\n            xhr.setRequestHeader(\"Accept\", \"text/javascript\");\n          },\n          success: function success(data, status, xhr) {\n            dialog.find(\".modal-body\").html(data);\n\n            widget._bindFormEvents();\n          },\n          error: function error(xhr, status, _error) {\n            dialog.find(\".modal-body\").html(xhr.responseText);\n          },\n          dataType: \"text\"\n        });\n      }, 200);\n    },\n    _bindFormEvents: function _bindFormEvents() {\n      var widget = this,\n          dialog = this._getModal(),\n          form = dialog.find(\"form\"),\n          saveButtonText = dialog.find(\":submit[name=_save]\").html(),\n          cancelButtonText = dialog.find(\":submit[name=_continue]\").html();\n\n      dialog.find(\".form-actions\").remove();\n      form.attr(\"data-remote\", true).attr(\"data-type\", \"json\");\n      dialog.find(\".modal-header-title\").text(form.data(\"title\"));\n      dialog.find(\".cancel-action\").unbind().click(function () {\n        dialog.each(function (index, element) {\n          bootstrap.Modal.getInstance(element).hide();\n        });\n        return false;\n      }).html(cancelButtonText);\n      dialog.find(\".save-action\").unbind().click(function () {\n        Rails.fire(form[0], \"submit\");\n        return false;\n      }).html(saveButtonText);\n      var event = new CustomEvent(\"rails_admin.dom_ready\", {\n        detail: form\n      });\n      document.dispatchEvent(event);\n      form.bind(\"ajax:complete\", function (event) {\n        var data = event.detail[0],\n            status = event.detail[1];\n\n        if (status == \"OK\") {\n          var json = $.parseJSON(data.responseText);\n          var option = '<option value=\"' + json.id + '\" selected>' + json.label + \"</option>\";\n          var select = widget.element.find(\"select\").filter(\":hidden\");\n\n          if (widget.element.find(\".filtering-select\").length) {\n            // select input\n            var input = widget.element.find(\".filtering-select\").children(\".ra-filtering-select-input\");\n            input.val(json.label);\n\n            if (!select.find(\"option[value=\" + json.id + \"]\").length) {\n              // not a replace\n              select.html(option).val(json.id);\n              widget.element.find(\".update\").removeClass(\"disabled\");\n            }\n          } else {\n            // multi-select input\n            var multiselect = widget.element.find(\".ra-multiselect\");\n\n            if (multiselect.find(\"option[value=\" + json.id + \"]\").length) {\n              // replace\n              select.find(\"option[value=\" + json.id + \"]\").text(json.label);\n              multiselect.find(\"option[value= \" + json.id + \"]\").text(json.label);\n            } else {\n              // add\n              select.append(option);\n              multiselect.find(\"select.ra-multiselect-selection\").append(option);\n            }\n          }\n\n          widget._trigger(\"success\");\n\n          dialog.each(function (index, element) {\n            bootstrap.Modal.getInstance(element).hide();\n          });\n        } else {\n          dialog.find(\".modal-body\").html(data.responseText);\n\n          widget._bindFormEvents();\n        }\n      });\n    },\n    _getModal: function _getModal() {\n      var widget = this;\n\n      if (!widget.dialog) {\n        widget.dialog = $('<div id=\"modal\" class=\"modal fade\">\\\n            <div class=\"modal-dialog modal-lg\">\\\n            <div class=\"modal-content\">\\\n            <div class=\"modal-header\">\\\n              <h3 class=\"modal-header-title\">...</h3>\\\n              <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\\\n            </div>\\\n            <div class=\"modal-body\">\\\n              ...\\\n            </div>\\\n            <div class=\"modal-footer\">\\\n              <a href=\"#\" class=\"btn cancel-action\">...</a>\\\n              <a href=\"#\" class=\"btn btn-primary save-action\">...</a>\\\n            </div>\\\n            </div>\\\n            </div>\\\n          </div>').on(\"hidden.bs.modal\", function () {\n          widget.dialog.remove(); // We don't want to reuse closed modals\n\n          widget.dialog = null;\n        });\n        new bootstrap.Modal(widget.dialog[0], {\n          keyboard: true,\n          backdrop: true,\n          show: true\n        }).show();\n      }\n\n      return this.dialog;\n    }\n  });\n})(jQuery);","map":null,"metadata":{},"sourceType":"module"}